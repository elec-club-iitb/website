<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title type="text" xml:lang="">Electronics Club, IIT Bombay</title>
 <link type="application/atom+xml" href="https://elec-club-iitb.github.io//atom.xml" rel="self"/>
 <link type="text" href="https://elec-club-iitb.github.io//" rel="alternate"/>
 <updated>2016-07-06T09:38:59+00:00</updated>
 <id>https://elec-club-iitb.github.io//</id>
 <author>
   <name></name>
   <email>eciitb@gmail.com</email>
 </author>

 
 <entry>
   <title>Pulse Detection Circuit</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/07/pulse-detection-circuit/"/>
   <updated>2016-07-01T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/07/pulse-detection-circuit</id>
   <content type="html">&lt;p&gt;In my ITSP, our aim was to make a polygraph machine for which we needed to monitor pulse of the examinee continuously over time. So here is what we did.&lt;/p&gt;

&lt;h3 id=&quot;required-components&quot;&gt;Required Components&lt;/h3&gt;

&lt;p&gt;IC LM324 (quad op-amp), 
IR LED, 
IR Sensor, 
A red LED, 
Resistors, 
Capacitors.&lt;/p&gt;

&lt;p&gt;The technique used is called Photoplethysmography (PPG).
There is an IR LED whose light is reflected by the skin and received by an IR sensor. The changes in volume of blood over the time changes the amount of reflection which is detected by the IR sensor and it is amazing how we can filter and amplify to get the pulse in desired range.&lt;/p&gt;

&lt;h3 id=&quot;basic-idea&quot;&gt;Basic Idea&lt;/h3&gt;

&lt;p&gt;There are two types of unwanted voltage signals in the signal received from input: the constant DC voltage and the noise from surroundings. For removing the DC voltage, there is (passive) high pass RC filter with 0.7Hz as cut off frequency. To remove the noise, there is (active) low pass op-amp filter with 2.3Hz as cut off frequency and gain of nearly 100.&lt;/p&gt;

&lt;h4 id=&quot;here-is-the-final-circuit-i-used&quot;&gt;Here is the final circuit I used:&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pulse-detection-circuit/image01.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-modifications-were-needed-in-the-basic-model&quot;&gt;What modifications were needed in the basic model?&lt;/h3&gt;

&lt;p&gt;So in this module, there is, in net effect, a band pass filter that allows 0.7Hz to 2.3Hz and amplifies the signal by 100. But this provides neither sufficient filtering nor sufficient amplification. To further filter and amplify the signal, the signal from first module is fed to an exact duplicate module containing passive high pass filter and active low pass filter. 
After this, amplification is nearly 10,000 and signal has frequency component only between 0.7Hz and 2.3Hz.&lt;/p&gt;

&lt;h4 id=&quot;further-amplification&quot;&gt;Further Amplification:&lt;/h4&gt;

&lt;p&gt;One can now see a pulse with little effort but only with amplitude of around 0.5V. So the signal is further fed to an op-amp with gain of 10.
This output can be fed to a red LED (voltage controlled by resistor) or analog pin of a microcontroller or DSO to observe the pulse clearly.&lt;/p&gt;

&lt;h4 id=&quot;have-a-look-at-the-working-video-here&quot;&gt;Have a look at the working video here:&lt;/h4&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/kgVUFpzo6lg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;On placing our finger on the IR LED/IR Sensor, we accurately get the pulse.&lt;/p&gt;

&lt;p&gt;It is amazing how, using such a specific property of light reflection and fluctuating blood volumes, we can design a very basic electronic circuit to return our pulse!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using Eagle to design PCBs</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/06/using-eagle-to-design-pcbs/"/>
   <updated>2016-06-06T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/06/using-eagle-to-design-pcbs</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Why PCB Designing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We often come across two scenarios where we need PCB designing.
Sometimes we need to fix a medium/large sized circuit with various
components into a smaller and more compact form. And sometimes we need
to use a specific circuit more number of times. In such cases, making a
Printed Circuit Board of the required circuit is very useful.&lt;/p&gt;

&lt;p&gt;Have a look:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/using-eagle-to-design-pcbs/image03.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Eagle?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eagle is a PCB Designing Software where you can use custom libraries for
using a variety of elements, from common Resistors, Capacitors etc to
specific ICs, Microcontrollers. It lets you add the elements you want,
design the circuit and the choose the physical connections the way you
want on your PCB.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Details Of Commands and usages in making the SCHEMATIC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are basically two parts of our development in Eagle. First, the
Schematic, that shows all the connections(but not the way you physically
want on the PCB). Secondly, forming final connections and arranging them
in the final physical way we want.&lt;/p&gt;

&lt;p&gt;So, in the session, we decided to make a IC 555 circuit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/using-eagle-to-design-pcbs/image01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;we-will-go-through-the-following-procedure&quot;&gt;We will go through the following procedure:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Making the Schematic&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Designing the physical connections&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us move on to using the software and its commands.&lt;/p&gt;

&lt;h3 id=&quot;making-the-schematic&quot;&gt;1. Making the Schematic&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;add:&lt;/strong&gt; Used to add any component. Type in the command bar on top&lt;/li&gt;
  &lt;li&gt;After performing add, lots of components will appear.
Type keywords to search components. Eg. &lt;strong&gt;RCL&lt;/strong&gt; in search box to find
Resistor, Capacitor, Inductor.(Take US Package for resistor.) (uF ==
Polarised, nF == ceramic)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;For NE555N&lt;/strong&gt; type:&lt;strong&gt;add&lt;/strong&gt; on terminal&amp;gt; search &lt;strong&gt;timer&lt;/strong&gt; &amp;gt;
Find 555. Double click&amp;gt;Paste.&lt;/li&gt;
  &lt;li&gt;Note:- Whenever &lt;strong&gt;IC&lt;/strong&gt; not found, Google the &lt;strong&gt;.lbr&lt;/strong&gt; file for that
IC and copy paste in Eagle list.&lt;/li&gt;
  &lt;li&gt;Use Escape to go back to menu.&lt;/li&gt;
  &lt;li&gt;For our 555 circuit, we will take a &lt;strong&gt;5mm LED&lt;/strong&gt; for Output&lt;/li&gt;
  &lt;li&gt;Type &lt;strong&gt;Supply&lt;/strong&gt; in search bar to get 5V and Ground&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;move:&lt;/strong&gt; to move a component&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;net:&lt;/strong&gt; make connections. Net adds connection and side by side
makes a file(which denotes that there must be a physical
connection made for this pair in the second part of our designing)
too.&lt;/li&gt;
  &lt;li&gt;Make end to end connections and use &lt;strong&gt;name command&lt;/strong&gt; to name the
wires/components differently so as to differentiate
between connections.&lt;/li&gt;
  &lt;li&gt;Giving values&lt;strong&gt;:&lt;/strong&gt; Use &lt;strong&gt;value&lt;/strong&gt; command and then click on component
to enter value.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Smash command:&lt;/strong&gt; to move around names.(Disassemble components to
move individually)&lt;/li&gt;
  &lt;li&gt;Search &lt;strong&gt;Pin Head&lt;/strong&gt; for Berg Pins!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Right click&lt;/strong&gt; a component to rotate&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Delete&lt;/strong&gt; command and select the “plus” sign (appearing at centre
of component on zooming) denoting the component to delete it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Label&lt;/strong&gt; command to show the labels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You are expected to be done with the schematic using these commands.&lt;/p&gt;

&lt;p&gt;Now Type &lt;strong&gt;Board&lt;/strong&gt; command and click Yes option to go to the next part.&lt;/p&gt;

&lt;h3 id=&quot;making-the-physical-connections&quot;&gt;2. Making the Physical Connections&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Air Line&lt;/strong&gt;: denotes a connection that must be made(shows that
these two points ought to be physically connected).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tools&amp;gt;Ratnest:&lt;/strong&gt;Simplifies air wire connections(because the
connections change with the physical positions of components and
so, they can also overlap)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Change package&lt;/strong&gt;: helps to change the &lt;strong&gt;type&lt;/strong&gt; of component.&lt;/li&gt;
  &lt;li&gt;Note: - If you made wrong connections and want to change a
component, do it in the schematic file (part 1) and not here.&lt;/li&gt;
  &lt;li&gt;Menu&amp;gt;Autorouter is used to find the possible physical routing by
eagle’s own algorithm. It will return certain best possibilities,
based on certain criteria.(Note:- Menu&amp;gt;Autorouter&amp;gt;Uncheck
Continuous Option while auto routing again). In case of &lt;strong&gt;Single
Layer PCBs&lt;/strong&gt;(we mostly have only single layered ones):Top is
Not Applicable.&lt;/li&gt;
  &lt;li&gt;We can do manual routing by &lt;strong&gt;Route Command.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Width&lt;/strong&gt; of the connection is given in Inches, around 0.024 inches
is a preferred width(it shouldn’t be very small because not many
printing facilities may have that accuracy).&lt;/li&gt;
  &lt;li&gt;Change &lt;strong&gt;track shape&lt;/strong&gt; by &lt;strong&gt;Right click&lt;/strong&gt;(Avoid using right angles
because of some&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ripoff&lt;/strong&gt; command changes a physical connection back to just an
air wire.&lt;/li&gt;
  &lt;li&gt;It might be useful to create a common ground/power line around the
PCB, it sometimes simplifies the complexity of connections.&lt;/li&gt;
  &lt;li&gt;Make sure to Save the file in the same folder as the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-make-final-output-files-for-gerbv&quot;&gt;To make final output files for Gerbv:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;File &amp;gt; Cam Processor.&lt;/li&gt;
  &lt;li&gt;File &amp;gt; Open &amp;gt; Job == gerb274x.cam&lt;/li&gt;
  &lt;li&gt;Process Job In bottom&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-see-the-final-files-in-gerbv&quot;&gt;To see the final files in Gerbv:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Open the files with following extensions &lt;code class=&quot;highlighter-rouge&quot;&gt;.brd, .cmp, .plc, .sol, .stc, .sts&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Using the &lt;strong&gt;text&lt;/strong&gt; command, you can write text anywhere. Use it for
specifying stuff to make circuit connection and component
placement easier. Add these names for reference by choosing layer
&lt;strong&gt;tNames&lt;/strong&gt; and adding text.&lt;/li&gt;
  &lt;li&gt;Change board size using &lt;strong&gt;move command&lt;/strong&gt; and moving the boundaries.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Path Finder Bot</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/05/path-finder-bot/"/>
   <updated>2016-05-30T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/05/path-finder-bot</id>
   <content type="html">&lt;p&gt;Okay, so my roomie cum best friend Mohit Kherwa wanted to build a bot which 
would crash land into some unknown location on Mars but still find its way to
the human base station. Since we were not getting a bot to Mars anytime soon, 
I suggested we build one that finds its way from our room to the next. And so 
we did. With help from wingies Shikhar Kothari and Harsh Meena.&lt;/p&gt;

&lt;h4 id=&quot;what-went-inside&quot;&gt;What went inside&lt;/h4&gt;

&lt;p&gt;We fixed IR sensors on the front and to the left. To measure the speed or the 
distance covered, we made white patches on the inside surface of the black wheel. 
Around 10 of them. There was an IR sensor pointed at the wheel. Essentially, we 
were receiving a square wave as input from the sensor. Measure the frequency, and 
voila, you have the bot’s speed! (We learnt later that this is the principle behind 
a tachometer.) The bot had three wheels, one freely rotating in the front(castor 
wheel), and two motors (standard 2W) with the rear two, for differential mechanism. 
And an Arduino, motor driver shield and a 12V battery. Well, so much for the hardware.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/path-finder-bot/image00.jpg&quot; alt=&quot;bot image 1&quot; /&gt;
&lt;img src=&quot;/assets/path-finder-bot/image01.jpg&quot; alt=&quot;bot image 2&quot; /&gt;
&lt;img src=&quot;/assets/path-finder-bot/image02.jpg&quot; alt=&quot;bot image 3&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-algorithm&quot;&gt;The Algorithm&lt;/h4&gt;

&lt;p&gt;The bot’s initial position was set to origin and thus it marked the coordinate system. 
Y axis was in the forward direction, and x to the right. We planned to put up an LCD 
display and buttons on the bot to enter the final coordinates. The coordinates of the 
destination was hard coded into the bot during testing. They were stored in variables 
x and y.&lt;/p&gt;

&lt;p&gt;Here’s the logic which we adopted in our arduino code:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If y&amp;lt;0
Turn 180 degree. Change the sign of x and y. (This step is to make sure that the 
final position is always ahead of the bot.)
Else
Go to step 2.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Move forward and decrease y accordingly until (y is decreased because the destination 
is getting closer)
    &lt;ol&gt;
      &lt;li&gt;y=0;
&lt;br /&gt;if x=0 as well,
Terminate the program. The bot has reached its destination.
Else go to step 5.&lt;/li&gt;
      &lt;li&gt;There is some obstacle ahead. (i.e, Front IR sensor goes off)
&lt;br /&gt;Go to Step 3.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Turn Right. Move forward and decrease x accordingly as long as the left IR sensor gives 
a high. Go to Step 4.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Turn Left. Go to Step 2.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If x&amp;lt;0, turn left, set y= -x and x=0. 
&lt;br /&gt;Go to step 2. 
&lt;br /&gt;(The bot just rotated the coordinate system by 90 degree and started all over again)
&lt;br /&gt;If x&amp;gt;0, turn right, set y= x and x=0. 
&lt;br /&gt;Go to step 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find the code &lt;a href=&quot;https://github.com/thariq-shanavas/Path-Finder-Bot&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sounds-straightforward-but&quot;&gt;Sounds straightforward, but…&lt;/h3&gt;

&lt;p&gt;The first real difficulty was the wheels slipping on the ground. This was sorted out by using rubberised wheels and bringing down the RPM of the motors by lowering the duty cycle of the PWM output to the motors.&lt;/p&gt;

&lt;p&gt;The second more serious difficulty was that due to manufacturing tolerances, the motors were not identical. Even when the same PWM signal was given to both motors, one tended to go slightly faster and this sometimes led to large cumulative error. We only had an IR sensor on one wheel, so only that wheel’s angular velocity could be measured.&lt;/p&gt;

&lt;p&gt;We tried to correct this error calibrating the duty cycle of the PWM signal to the motors but unfortunately this calibration was dependent on battery voltage- when the battery voltage dropped by half a volt, the bot had to be recalibrated. Then we tried adding an IR sensor to the other wheel and add a feedback system for self-calibration, but the Arduino was not fast enough to collect that much data and process it- angular frequencies of the wheels were wrongly calculated and the bot went haywire. The proposed workaround was to use stepper motors, but then we never got around to implementing it- this was done in the few days following the endsems and all of us had to go home by that time.&lt;/p&gt;

&lt;p&gt;The error was never great enough to defeat the purpose of the bot - the bot usually reached its target with a tolerance of a few centimeters. The error was noticeable only when the battery was heavily drained.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fundamentals of a SLAM Algorithm</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/05/fundamentals-of-a-slam-algorithm/"/>
   <updated>2016-05-30T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/05/fundamentals-of-a-slam-algorithm</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The term SLAM is as stated an acronym for &lt;strong&gt;Simultaneous Localization And Mapping&lt;/strong&gt;. Mapping is all about building maps of the environment. There are a number of different methods for building maps and some of them are quite sophisticated. All these methods have in common that they build a model of the environment while also addressing the fact that the robot itself accrues uncertainty while it moves.&lt;/p&gt;

&lt;h2 id=&quot;steps-involved-in-slam-algorithms&quot;&gt;Steps involved in SLAM Algorithms&lt;/h2&gt;
&lt;p&gt;The various algorithm consists of multiple parts; Landmark extraction, data association, state estimation, state update and landmark update. This post will explain what happens in each step. There are many different algorithms to accomplish each of these steps and one can follow any one of the methods. The fundamentals of each algorithm is what this post will explain.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Landmark Extraction&lt;/em&gt;&lt;/strong&gt;:&lt;br /&gt;
&lt;img src=&quot;/assets/fundamentals-of-a-slam-algorithm/image_2.jpg&quot; alt=&quot;Landmark-Extraction&quot; /&gt;&lt;br /&gt;
Landmarks are distinct, salient features like blobs or corners within an image/frame. Salient features in computer vision are an art in itself. There are dozens of different approaches to extract, describe and match such features. Once extracted they help the robot keep track of where it is by measuring its position relative to the landmark. Landmarks act as memory and helps the robot identify whether it has visited a certain place in the past or not. This leads us to the next part.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Data association&lt;/em&gt;&lt;/strong&gt;:&lt;br /&gt;
&lt;img src=&quot;/assets/fundamentals-of-a-slam-algorithm/image_3.png&quot; alt=&quot;Data-Association&quot; /&gt;&lt;br /&gt;
The problem of data association is that of matching observed landmarks from different (laser) scans with each other. We have to accurately tell whether we have seen a landmark or if it’s a new landmark. If it’s new we add it to the list of observed landmarks, if it’s old we we can measure the relative position of the robot and then accordingly update the position of the robot as well as the landmark on the map. This brings us to the next logical step.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;State Estimation and State Update&lt;/em&gt;&lt;/strong&gt;:&lt;br /&gt;
Here we try to estimate position of the robot using input from number of sensors. There are two types of sensors, internal and external sensors:&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Internal sensors - These are sensors that are attached to the robot. They include &lt;strong&gt;accelerometer&lt;/strong&gt;, &lt;strong&gt;gyroscopes&lt;/strong&gt;, &lt;strong&gt;motor encoders&lt;/strong&gt;, &lt;strong&gt;cameras&lt;/strong&gt; which help the robot localize itself without any external interference.&lt;/li&gt;
      &lt;li&gt;External sensors: As the name suggests these the robot gets its input from sources not attached to the robot. It includes navigation systems like &lt;strong&gt;GPS&lt;/strong&gt;, &lt;strong&gt;electric beacons&lt;/strong&gt; etc.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Using just internal sensors usually gives small amount of error which over time adds up to produce significant errors. This is why we also employ the use of external sensors to facilitate internal sensors. 
We update the estimated state using sensor data. Using observed landmarks we calculate what should have been our position. Usually there is some difference between the estimated state and the calculated state, this is called the &lt;strong&gt;innovation&lt;/strong&gt;.
Finally depending upon how sure are we about the landmarks and the sensor data we update the robot position to be somewhere between estimated state and calculated state.
The flowchart shown below depicts the above process :-&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/fundamentals-of-a-slam-algorithm/image_1.jpg&quot; alt=&quot;State-Update&quot; style=&quot;margin-left:37px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Landmark update&lt;/em&gt;&lt;/strong&gt;:&lt;br /&gt; 
When we observe a previously unseen feature we update the list of landmarks to include this new feature. Also when we observe a old landmark, if it appears at the same position as in the previous measurement our confidence in that Landmark is increased. This used to decide if we should trust the sensors more than the landmarks or vice-versa.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After Landmark update the robot moves and then the whole cycle repeats again. When the robot moves the uncertainty of its position increases. After the cycle not only the robot is confident of its position but has also extracted information about the environment and associated itself with it. In this way the robot not only &lt;strong&gt;maps the environment but also knows where it is in it&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/fundamentals-of-a-slam-algorithm/image_0.png&quot; alt=&quot;Application&quot; /&gt;&lt;br /&gt;
The main aim of this post was to familiarize one with the basics of a SLAM Algorithm to the level that he/she is now able to go further, read tutorials from the internet and implement a SLAM based robot. The applications of this technology are infinite. It is the key to &lt;strong&gt;self-driving cars&lt;/strong&gt;, &lt;strong&gt;unmanned aerial vehicles&lt;/strong&gt;, &lt;strong&gt;autonomous underwater vehicles&lt;/strong&gt;, &lt;strong&gt;planetary rovers&lt;/strong&gt;, &lt;strong&gt;newly emerging domestic robots&lt;/strong&gt; and even &lt;strong&gt;robots inside the human body&lt;/strong&gt;. It is a big and active research field with many unsolved problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hope you had a good time reading this blog and were able to learn something new!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Deep Learning Based Image Classification</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/05/deep-learning-based-image-classification/"/>
   <updated>2016-05-20T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/05/deep-learning-based-image-classification</id>
   <content type="html">&lt;h4 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h4&gt;

&lt;p&gt;Idea about Artificial Neural Networks, good if you
have familiarity with the ideas of supervised learning, logistic
regression, gradient descent, SVM-based classification, k-means
clustering, kernel tricks like KPCA, etc.&lt;/p&gt;

&lt;h4 id=&quot;motivation&quot;&gt;Motivation&lt;/h4&gt;

&lt;p&gt;Deep neural networks (DNNs) trained via backpropagation
were recently shown to perform well on image classification tasks with
lakhs of training images and lot of categories. The feature
representation learned by these networks achieves state-of-the-art
performance not only on the classification task for which the network
was trained, but also on various other visual recognition tasks, for
example: classification on various dataset; scene recognition, etc. This
capability to generalize to new datasets makes supervised CNN
(Convolutional Neural Networks) training an attractive approach for
generic visual feature learning.&lt;/p&gt;

&lt;h3 id=&quot;what-is-deep-learning--what-makes-it-deepsup1suphttpwwwnvidiacomcontenteventsgeoint2015lbrowndlimageclassificationgeointpdf&quot;&gt;What is Deep Learning / What makes it “deep”&lt;a href=&quot;http://www.nvidia.com/content/events/geoInt2015/LBrown_DL_Image_ClassificationGEOINT.pdf&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/deep-learning-based-image-classification/image02.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1 million parameters&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;10 mil images&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;10 layers!!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s what makes it “deep”!&lt;/p&gt;

&lt;p&gt;Deep learning methods aim at learning feature hierarchies with features
from higher levels of the hierarchy formed by the composition of lower
level features. For image classification tasks, the most effective deep
networks used nowadays are the Convolutional Neural Networks (others
include corrNets, restricted Boltzmann machines, Recurrent Neural
Networks, etc.).&lt;/p&gt;

&lt;h3 id=&quot;image-classification-with-cnns&quot;&gt;Image Classification with CNNs&lt;/h3&gt;

&lt;p&gt;Each CNN has its own architecture - convolution layers, pooling layers
(max pooling, weighted mean pooling, etc), fully connected layers et al.&lt;/p&gt;

&lt;p&gt;Three methods of training using a Conv Net:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Supervised&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unsupervised&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reinforcement&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/deep-learning-based-image-classification/image05.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most common method is to learn the network using a huge set of
training images. This approach is called the supervised learning of the
network. To learn the network implied learning the filters in the
convolution layer (filters are also called weights)&lt;/p&gt;

&lt;p&gt;It involves 2 phases - &lt;em&gt;Training&lt;/em&gt; run and a accuracy &lt;em&gt;testing&lt;/em&gt; run&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Training run:&lt;/strong&gt; Pick a CNN architecture -&amp;gt; Input a million
training images spanning all categories -&amp;gt; One or days of GPU
computation&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;Accuracy testing:&lt;/strong&gt; If the accuracy is bad, fix the training set,
tweak the training parameters -&amp;gt; do it again&lt;/p&gt;

&lt;p&gt;CNN learnt with supervised learning give a high accuracy for
classification tasks and the same network can be used for other tasks
too, like scene detection.&lt;/p&gt;

&lt;h3 id=&quot;introduction-of-discriminative-unsupervised-learning-in-neural-networks&quot;&gt;Introduction of discriminative Unsupervised learning in Neural Networks&lt;/h3&gt;

&lt;p&gt;The downside of supervised training is the need for expensive labeling,
as the amount of required labeled samples grows quickly the larger the
model gets. For this reason, unsupervised learning remains an appealing
paradigm, since it can make use of raw unlabeled images and videos.
Furthermore, on vision tasks outside classification it is not even
certain whether training based on object class labels is advantageous.
For example, recent results show that it outperforms supervised feature
learning also on descriptor matching.&lt;/p&gt;

&lt;p&gt;In Unsupervised learning, the filter (or weights) are not learnt
directly from the training images. Sometimes, a predefined set of
filters is chosen - best example being the Gabor filters - or the
filters are extracted from the images ‘patches’ with some processing
done on them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/deep-learning-based-image-classification/image04.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fig: MNIST dataset classification using k-means clustering&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A common framework used in unsupervised feature learning is &lt;a href=&quot;http://ai.stanford.edu/~ang/papers/aistats11-AnalysisSingleLayerUnsupervisedFeatureLearning.pdf&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Extract random patches from unlabeled training images.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apply a pre-processing stage to the patches.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Learn a feature-mapping using an unsupervised learning algorithm.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Given the learned feature mapping and a set of labeled training images
we can then perform feature extraction and classification:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Extract features from equally spaced sub-patches covering the
input image.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pool features together over regions of the input image to reduce the
number of feature values.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Train a classifier to predict the labels given the feature vectors.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Image classification results can be hugely increased using some
preprocessing (can be anything depending on the application). It is
common practice to perform several simple normalization steps before
attempting to generate features from data. In Unsupervised feature
extraction, there are also some tricks like the &lt;em&gt;‘kernel trick’&lt;/em&gt; which
can improve the classification results.&lt;/p&gt;

&lt;p&gt;The feature vector length can always be reduced using some fully
connected layers in the network. This can help speed-up the
classification, but must be used carefully as to not compromise the
accuracy. Much future work is going on in the direction of using
unsupervised or semi-supervised neural networks, since as of now they
are not very scalable.&lt;/p&gt;

&lt;p&gt;Deep learning, CNNs, corrNets, etc are THE most active fields in data
analytics. And I believe can be learnt only through experimentation! So
feel free to explore this ocean of deep learning! Enjoy!&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Yash Bhalgat.&lt;/p&gt;

&lt;p&gt;[1]: &lt;a href=&quot;http://www.nvidia.com/content/events/geoInt2015/LBrown_DL_Image_ClassificationGEOINT.pdf&quot;&gt;deep learning for image classification - Nvidia. 2015. 15 May.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href=&quot;http://ai.stanford.edu/~ang/papers/aistats11-AnalysisSingleLayerUnsupervisedFeatureLearning.pdf&quot;&gt;Coates, A. “An Analysis of Single-Layer Networks in Unsupervised Feature Learning.” 2011.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Making of Burglar Alarm</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/05/burglar-alarm/"/>
   <updated>2016-05-13T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/05/burglar-alarm</id>
   <content type="html">&lt;p&gt;In the First semester along with Pranav, I tried to design a burglar alarm circuit that would go off if the burglar tripped over a copper wire. We built a small scale working model of the circuit and presented it in one of the How Things Work Session which is organised by the Robotics Club in association with the Electronics Club of IIT Bombay.&lt;/p&gt;

&lt;p&gt;This how we went about designing and building the circuit.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A burglar alarm is basically an intruder alert system used to prevent theft/robbery and protect one’s premises. The circuit that we have built over here can be easily built and understood by anyone who has &lt;strong&gt;enthu!!&lt;/strong&gt; Most of the components will be available at Tinkerer’s Lab so take a good look before buying anything.&lt;/p&gt;

&lt;p&gt;So, Let’s dive in&lt;/p&gt;

&lt;h2 id=&quot;concepts-and-basic-principles&quot;&gt;Concepts and Basic Principles&lt;/h2&gt;
&lt;p&gt;Well, the basic idea is that when someone trips over the copper wire and it snaps the circuit is broken which then triggers an impulse and the speaker starts buzzing.&lt;/p&gt;

&lt;p&gt;How is the impulse triggered?&lt;br /&gt;
Here we make use of &lt;strong&gt;555 timer IC&lt;/strong&gt;. 
The figure shown below shows us the basic circuit.
&lt;br /&gt;
&lt;img src=&quot;/assets/the-making-of-burglar-alarm/image_0.jpg&quot; alt=&quot;Timer-circuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
The main pin which is of interest to us is &lt;strong&gt;PIN 2&lt;/strong&gt; - It turns on the output when the voltage supplied to it drops below 1/3 of Vcc.&lt;/p&gt;

&lt;p&gt;So one can imagine one end of the copper wire being connected to &lt;strong&gt;PIN 2&lt;/strong&gt; and one end of the speaker being connected to &lt;strong&gt;PIN 3&lt;/strong&gt;. The other end of both these entities would obviously be connected to the ground. When the circuit breaks the voltage at &lt;strong&gt;PIN 2&lt;/strong&gt; drops below the threshold which triggers an output at &lt;strong&gt;PIN 3&lt;/strong&gt; due to which the speaker starts buzzing.&lt;/p&gt;

&lt;p&gt;The only question now remaining is how does the 555 Timer work?&lt;br /&gt;
In this project we operate the 555 timer in &lt;strong&gt;Monostable&lt;/strong&gt; mode.&lt;/p&gt;

&lt;p&gt;And what is &lt;strong&gt;Monostable&lt;/strong&gt; mode?&lt;br /&gt;
This mode works on the principles of Monostable multivibrator. A monostable multivibrator is an electronic circuit that generates an output pulse. When triggered, a pulse of pre-defined duration is produced. The circuit then returns to its quiescent state and produces no more output until triggered again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;And this is exactly what we need!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So now having our concepts on solid foundations we can move on to actually building the circuit!&lt;/p&gt;

&lt;h2 id=&quot;components-required&quot;&gt;Components Required&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;555 Timer IC&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Copper wire pf appropriate resistance&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resistance and Capacitors&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;burglar-alarm-circuit-diagram&quot;&gt;Burglar Alarm Circuit Diagram&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/the-making-of-burglar-alarm/image_1.gif&quot; alt=&quot;alarm-circuit&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;build-the-circuit&quot;&gt;Build the Circuit&lt;/h2&gt;
&lt;p&gt;What you need to do is produce the exact replica of the above schematic diagram on your breadboard. In theory this sounds simple but we faced a number of problems and we hope to document all of them down in high hopes that you don’t run into them.&lt;/p&gt;

&lt;p&gt;After making it try detaching one connection of the copper wire. If you’re speaker buzzes &lt;strong&gt;&lt;em&gt;Yayy!!! You’ve done it!&lt;/em&gt;&lt;/strong&gt;. Although the circuit was simple the underlying concepts lay the foundations for a number of complicated projects.&lt;/p&gt;

&lt;h2 id=&quot;problems-faced-by-us&quot;&gt;Problems faced by us&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Use the exact values of capacitors and resistances or any other values based on precise calculations as the working of the circuit is greatly dependent on these variables&lt;/li&gt;
  &lt;li&gt;Even the type of copper wire has been specifically chosen and we did run into lot of debugging problems due to this. Just make sure &lt;strong&gt;NOT&lt;/strong&gt; to use the thin copper wire that is available in wires.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extend-this-project&quot;&gt;Extend this project&lt;/h2&gt;
&lt;p&gt;The concepts we laid down here are the foundations of any burglar alarm systems in general. Burglar alarms or alert systems can be designed in different ways; from very simple sound alarm system (the one we made) to the advanced and feature rich system which will send SMS alerts, activate sound alarm, turn ON lights, turn ON CCTV cameras, close the main gate etc. We hope you can take on the more advanced ones!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hope you had a great time reading this and were able to learn something new!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Game Of Pong</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/05/game-of-pong/"/>
   <updated>2016-05-08T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/05/game-of-pong</id>
   <content type="html">&lt;p&gt;What is the best time for lukha? After the mid-sem or end-sem
examinations. I and my friends, Dhrumil and Manas wanted to have some
fun with the arduino, so we decided to make some game using it. After a
long discussion, we chose to make the classic arcade game ‘ PONG ‘.&lt;/p&gt;

&lt;p&gt;The first thing we had to do was build a screen to play the game. So, we
chose to make a 7*5 LED array(matrix) for our screen.&lt;/p&gt;

&lt;p&gt;The Circuit Diagram for the Screen :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/game-of-pong/image08.gif&quot; alt=&quot;LED Array&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To check whether the LED matrix was working properly, we tried to make a
scrolling LED display(Like the one in a Railway Station).&lt;/p&gt;

&lt;p&gt;It was after we did this that we realized a major flaw in the circuit
design of the above LED matrix.&lt;/p&gt;

&lt;p&gt;Suppose we want to on the LED ROW 3 and COL 3, and LED ROW 4 COL 4, we
will ground COL 3 and COL 4 and give HIGH to ROW 3 and ROW 4. But in
this process, the LED’s in ROW 3 COL 4 and COL 3 ROW 4 will also light
up as they have received the power supply as well.&lt;/p&gt;

&lt;p&gt;In fact, if we try to light up all the diagonal LED’s in a square
matrix, the whole matrix will light up because we are effectively
powering up the whole matrix.&lt;/p&gt;

&lt;p&gt;So, because of this glitch, we were forced to temporarily give up on
this idea.&lt;/p&gt;

&lt;p&gt;Another thing we could have done was power up each LED individually,
that is control each LED individually. But, this would need 35 pins on
the arduino, and the arduino does not have that many pins. So, we had to
either use an Arduino Mega board with more pins, or we would have to
come up with some other idea. So while coming up with alternatives, we
came across an IC called a ‘Shift Register’. What it basically does is
allow us to control as many LED’s as we want using only 3 pins of the
arduino board. So, we modified our circuit and connected each LED
individually using the shift registers. This way, we were able to
control each LED individually.&lt;/p&gt;

&lt;p&gt;Overall, it was an excellent learning experience for all of us, as we
learnt a lot, mainly how to debug such circuits, and, we also learned
how to use shift registers in circuits.&lt;/p&gt;

&lt;h3 id=&quot;how-shift-registers-work&quot;&gt;How Shift Registers Work&lt;/h3&gt;

&lt;p&gt;Learning such an amazing and useful device such as a shift register has
been a wonderful experience in itself. Controlling how many ever outputs
you want using only 3 pins of the arduino is something very useful for
folks who are short of pins(like us).&lt;/p&gt;

&lt;p&gt;A Shift Register is basically a cascade of flip-flops in which the
output of one flip-flop is connected to the input of the next one.&lt;/p&gt;

&lt;h4 id=&quot;pin-layout-and-function-table--ic-is-74hc595&quot;&gt;Pin Layout and Function Table : (IC is 74HC595)&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/game-of-pong/image04.png&quot; alt=&quot;IC Connections 1&quot; /&gt;
&lt;img src=&quot;/assets/game-of-pong/image09.png&quot; alt=&quot;IC Connections 2&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;circuit-diagram-&quot;&gt;Circuit Diagram :&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/game-of-pong/image02.png&quot; alt=&quot;Update Circuit&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;arduino-connection-diagram-&quot;&gt;Arduino Connection Diagram :&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/game-of-pong/image06.png&quot; alt=&quot;Arduino Connections&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;this-is-how-the-ic-works-&quot;&gt;This is how the IC works :&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We have three main pins, STCP(Latch), DS(Data), SHCP(Clock). We
transfer the data to the first pin of the shift register. The
value of the bit transferred is the same as the input given to
the data(DS) pin , if the DS pin is high, a high(1) bit is
transferred to the first pin, whereas if the DS pin is LOW,
a low(0) bit is transferred.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, the next thing we have to do is shift this bit to the
next register. This is achieved by pulsing the clock(SHCP) pin (
Giving it a low to high voltage transition ). Thus, the bit which
is stored in one register is shifted to the next one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, we continue pulsing the Clock Pin, until we have set the
required output on all the shift registers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After all the data has been stored in the registers, it is time to
put them on their respective output pins. This is achieved by
pulsing the latch(STCP) pin( Giving it a low to high voltage
transition ).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using one Shift Register, 8 outputs can be controlled. If we want more
outputs, we have to attach more than one shift registers by connecting
the Serial Out pin of one shift register to the DATA pin of the next
register. Thus, using 5 shift registers, we were able to control 35
LED’s for our game.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;

&lt;p&gt;You can refer to the following video to get a clearer understanding of
the working principle of shift registers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6fVbJbNPrEU&quot;&gt;https://www.youtube.com/watch?v=6fVbJbNPrEU&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Working of a Digital Light Processing Projector</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/05/working-of-a-dlp-projector/"/>
   <updated>2016-05-03T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/05/working-of-a-dlp-projector</id>
   <content type="html">&lt;p&gt;The Robotics Club in association of The Electronics Club of IIT Bombay conducts regular sessions named “How Things Work?” where we open up a device used in everyday life and try to understand how it works.&lt;/p&gt;

&lt;p&gt;On a particular session we opened up a DLP projector.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Digital light processing is a display device based on optical micro-electro-mechanical technology. In simple words, it is the device which is used inside the projectors used for showing films in theatres. It was originally developed in 1987 by Dr.Larry Hornbeck of Texas Instruments. While the DLP imaging device was invented by Texas Instruments, the first DLP-based projector was introduced by Digital Projection Ltd in 1997&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/working-of-a-dlp-projector/image_0.jpg&quot; alt=&quot;Components&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/working-of-a-dlp-projector/image_1.jpg&quot; alt=&quot;diagram&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Lamp&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Condensing lens&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Colour Filter&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shaping Lens&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DMD (digital micromirror device)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;working-of-the-projector&quot;&gt;Working of the Projector&lt;/h2&gt;

&lt;h4 id=&quot;lamp-&quot;&gt;Lamp :&lt;/h4&gt;
&lt;p&gt;The lamp is generally a Xenon arch lamp which is ignited by a 5000 - 20,000 volt pulse from a current-regulating ballast to initiate an arc between two electrodes in the quartz tube.&lt;/p&gt;

&lt;h4 id=&quot;condensing-lens-&quot;&gt;Condensing Lens :&lt;/h4&gt;
&lt;p&gt;The light passes through the condensing lens which converges light on the colour wheel.&lt;/p&gt;

&lt;h4 id=&quot;colour-wheel-&quot;&gt;Colour Wheel :&lt;/h4&gt;
&lt;p&gt;Now let’s understand what this colour wheel is. You can see in the diagram given above that there is a chip (DMD) which sends light to the screen. All that the chip can do is either send or not send light – making it black-and-white only. To create colour images, projector manufacturers include a colour wheel which rotates in synchronization over the DLP chip. As it rotates between red, blue and green, the DLP chip sends the correct pattern of light. Because the images go on and off the screen so quickly, the brain puts them together into one full-colour image. It gives us a sense of a continuous motion picture going on, a phenomenon known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Persistence_of_vision&quot;&gt;Persistence&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;dmd-chip-&quot;&gt;DMD Chip :&lt;/h4&gt;
&lt;p&gt;After passing through colour wheel light falls on the DMD chip. A DMD chip has on its surface several hundred thousand microscopic mirrors arranged in a rectangular array which correspond to the pixels in the image to be displayed. The mirrors can be individually rotated ±10-12°, to an on or off state. In the on state, light from the projector bulb is reflected into the lens making the pixel appear bright on the screen. In the off state, the light is directed elsewhere (usually onto a heatsink), making the pixel appear dark.&lt;/p&gt;

&lt;h2 id=&quot;working-of-the-dmd-chip&quot;&gt;Working of the DMD chip&lt;/h2&gt;

&lt;p&gt;The working mechanisms of a DMD chip is a very interesting combination of application of mechanical, electrical and optical engineering.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/working-of-a-dlp-projector/image_2.jpg&quot; alt=&quot;DMD chip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
The DMD chip has millions of small mirrors. Before any of the mirrors in the DMD chip switch to their on or off positions, the chip will rapidly decode a bit-streamed image code that enters through the semiconductor. It then converts the data from interlaced to progressive, allowing the picture to fade in. Next, the chip sizes the picture to fit the screen and makes any necessary adjustments to the picture, including brightness, sharpness and colour quality. Finally, it relays all the information to the mirrors, completing the whole process in just 16 microseconds.&lt;/p&gt;

&lt;p&gt;The mirrors are mounted on tiny mechanical hinges that enable them to tilt either toward the light source (ON) or away from it (OFF) up to +/- 12°, and as often as 5,000 times per second. When a mirror is switched on more than off, it creates a light gray pixel. Conversely, if a mirror is off more than on, the pixel will be a dark gray. Now combining this with the colour wheel, we can get all the colours we want. In simple words, the proportion of time the mirror is ON decides the intensity of the color which is sent to it by the color wheel.&lt;/p&gt;

&lt;h4 id=&quot;lens&quot;&gt;Lens&lt;/h4&gt;
&lt;p&gt;Finally all the data (pixels) obtained from the DMD chip is projected on screen after passing the light through a diverging lens and thus we get the desired visual output on the screen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The lens arrangement is made such that light from the lamp is passed through the condenser which focuses the beam on colour wheel and then the same beam has to be de-focussed in order to project it on the screen.&lt;/p&gt;

&lt;p&gt;For getting a better understanding of how a DLP works, you can watch this &lt;a href=&quot;https://youtu.be/CI0cwk25CAs&quot;&gt;YouTube video&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Started with Beaglebone Black</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/04/getting-started-with-beaglebone-black/"/>
   <updated>2016-04-26T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/04/getting-started-with-beaglebone-black</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;&lt;u&gt;You will need&lt;/u&gt;&lt;/strong&gt; - A BeagleBone Black AM335x (an older version should also do.), a PC (I have used a Linux distribution), Ethernet Cables and Ports &lt;i&gt;and lots of patience.&lt;/i&gt;
&lt;img src=&quot;/assets/getting-started-with-beaglebone-black/bbb.jpg&quot; alt=&quot;The BeagleBone Black&quot; /&gt;
The BeagleBone Black is an embedded development board, just like the &lt;a href=&quot;http://www.raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt;, &lt;a href=&quot;https://www.arduino.cc/en/ArduinoCertified/IntelGalileo&quot;&gt;Intel Galileo&lt;/a&gt; etc. It offers several advantages over the others in the category, and also has its own demerits. We’ll get to that in the end. &lt;br /&gt;
For the specs, the BBB has a 1Ghz ARM Cortex-A8 and 512MB of DDR3 RAM on board - almost as capable as a medium range smartphone. It houses an on-board 8-bit 4GB flash memory which comes preloaded with the &lt;em&gt;Angstrom&lt;/em&gt;. It has a total of 92 pins, of which 66 can be used as GPIO pins. For more specification, you may refer &lt;a href=&quot;http://beagleboard.org/support/bone101&quot;&gt;here&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The BeagleBone is amazingly simple to start off with, and is indeed the most convenient of any embedded board, since it comes with a preloaded OS. There are multiple ways to access the BBB from your system, each of which will be described briefly.&lt;/p&gt;

&lt;p&gt;Connect the BBB via the USB cable provided in the box. The BBB can be directly accessed using the web browser, and programs can be executed using Bonescript, which is similar to JS. By default, your BBB comes with it’s IP address on &lt;em&gt;usb0&lt;/em&gt; port as &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.7.2&lt;/code&gt;. Enter this in your browser, and you are good to go. You can access the GPIO, and run programs with the BBB as your microcontroller, just like you run scripts in Arduino. A sample of the available functions can be seen &lt;a href=&quot;http://beagleboard.org/support/bone101&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For accessing the &lt;em&gt;real capabilities of the board&lt;/em&gt; as a computer in itself, you will need to do a little more, but fear not! Plug in the BBB using the USB cable, and go to your &lt;em&gt;terminal&lt;/em&gt; (Windows users may have to use &lt;a href=&quot;http://www.putty.org/&quot;&gt;PuTTY&lt;/a&gt;) and type:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yourIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//or&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yourIP&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//You may have to use sudo, if permissions are an issue.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This will enable you to use the BBB as the root user. You will notice that the files and structure of the memory is similar to any other Linux distro. &lt;em&gt;The BBB is your very own credit-card sized computer!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that you have entered the system, there exist no bounds to what can be done. Some packages as pre-installed, like &lt;code class=&quot;highlighter-rouge&quot;&gt;Python&lt;/code&gt;, and can be used directly. Have fun tinkering with your cute little pup. To burn bonescripts, the browser sure is a cool bet!&lt;/p&gt;

&lt;h2 id=&quot;using-the-beaglebone-black-remotely&quot;&gt;Using the BeagleBone Black remotely&lt;/h2&gt;
&lt;p&gt;You have used the BBB by connecting it to your PC, but what if you want it to act independently, or on the network? There must be a way to access the board via a network, and not just USB. Turns out, there is - and much simpler than the R-Pi in this case! Here’s what you must do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Connect the BBB to your system, as stated above. Enter the system using SSH and login as root (use the Terminal or PuTTY)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;cd /etc/network&lt;/code&gt; and open the file &lt;em&gt;interfaces&lt;/em&gt; using VI or nano.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interfaces&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//or&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nano&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interfaces&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//sudo would be used if the user is not root.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;This opens the file interfaces. You will see the following lines written in the end.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usb0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inet&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.2&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;netmask&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This defines the action performed when the BBB is connected via USB. (Note &lt;code class=&quot;highlighter-rouge&quot;&gt;usb0&lt;/code&gt;) You can choose to keep this or comment it out depending on usage. Now, let’s go on with the task of setting it up remotely.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here, I’m using LAN for that purpose. Before starting, create a backup of the file so that you have something to go back to - messing up is allowed!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;network&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interfaces&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interfaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backup&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vi&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interfaces&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//The file opens up. Now, we must edit it.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Add the following lines in it.NOTE, add values according to your ethernet/router settings. These are the ones appropriate for me.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eth0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inet&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.173&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;24.69&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;netmask&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;gateway&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.173&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;24.250&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameservers&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.11&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameservers&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Here, we declared the &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; IP for the Ethernet port &lt;code class=&quot;highlighter-rouge&quot;&gt;eth0&lt;/code&gt;. According to your Service Provider, you may replace &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;dhcp&lt;/code&gt;. Thus, the definition of the port is set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To check whether you have established connection, run &lt;code class=&quot;highlighter-rouge&quot;&gt;ping 10.173.24.69&lt;/code&gt;(IP address) or &lt;code class=&quot;highlighter-rouge&quot;&gt;ping 10.200.1.11&lt;/code&gt;(DNS Server).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, leave the BBB with an independent power source, connected to Ethernet. With a system connected to the same network, you can now access the BBB. Say, you have a laptop connected to the router or LAN network. Fire the Terminal/PuTTY and type :&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.173&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;24.69&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//basic syntax is &#39;sudo ssh user@yourIP&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This would take a while, but is sure to get you into the BBB considering that your Bone and laptop are both connected and active. You can control and run the BBB remotely, and also share/install packages over the network.&lt;/p&gt;

&lt;p&gt;Now that you have connected to the Bone directly and remotely, you can do almost anything with the Processor. Tried and tested ideas include using the remote computer to run as a portable unit running heavy Mathematica/MATLAB scripts, or Python codes, or even a host/router. And with 66 GPIO pins, Electronics Projects would surely be cooler, and cleaner! :)&lt;/p&gt;

&lt;h2 id=&quot;merits--demerits&quot;&gt;Merits &amp;amp; Demerits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The BeagleBone is a favorable choice for beginners because it is a direct plug-and-play unit (R-Pi needs you to install Raspbian OS before use). Also, the higher no. of GPIO pins ensure that you’re never short of pins for your sensors! Also, for the geeks and performance freaks, it packs the best processor and graphics accelerator in the range. The on-board Flash is also very fast.&lt;/li&gt;
  &lt;li&gt;That said, the main issue you’d face would be lack of online support (one of the reasons I wanted to make a beginner tutorial!) for your minor bugs and queries. Also, the basic use over the web may require some use of JavaScript and hence, some background. Also, in general, using any such development board requires immense amount of patience. You don’t really get ready-made solutions online. More so with the BBB, than the R-Pi. but it’s certainly better than starting off with the Intel Galleo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you have a good time tinkering around with the BeagleBone Black.&lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Meanshift Algorithm for Image Processing</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/03/meanshift-algorithm-for-image-processing/"/>
   <updated>2016-03-24T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/03/meanshift-algorithm-for-image-processing</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;&lt;u&gt;Pre-requisites&lt;/u&gt;&lt;/strong&gt; - Basic idea of matrices(wrt pixels), a &lt;a href=&quot;https://en.wikipedia.org/wiki/Kernel_(image_processing)&quot;&gt;kernel or convolution matrix&lt;/a&gt;, local binary patterns, high-school statistics principles and &lt;em&gt;enthu&lt;/em&gt;!
&lt;img src=&quot;/assets/meanshift-algorithm-for-image-processing/demo_org.png&quot; alt=&quot;Original Image&quot; /&gt; &lt;img src=&quot;/assets/meanshift-algorithm-for-image-processing/demo_4.png&quot; alt=&quot;Image after using the algorithm&quot; /&gt; &lt;br /&gt;
One of the most common and important applications of Image Processing remains &lt;em&gt;Edge-Detection&lt;/em&gt;. The ‘algorithm’ followed for &lt;a href=&quot;https://en.wikipedia.org/wiki/Canny_edge_detector&quot;&gt;Canny-edge Detection&lt;/a&gt; is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apply a suitable filter to smooth the image in order to remove the noise&lt;/li&gt;
  &lt;li&gt;Find the intensity gradients of the image&lt;/li&gt;
  &lt;li&gt;Apply non-maximum suppression to get rid of spurious response to edge detection&lt;/li&gt;
  &lt;li&gt;Apply double threshold to determine potential edges&lt;/li&gt;
  &lt;li&gt;Track edge by hysteresis: Finalize the detection of edges by suppressing all the other edges that are weak and not connected to strong edges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, the most very first step involves filtering and removal of the noise. &lt;br /&gt;
&lt;strong&gt;WHAT IS THIS &lt;em&gt;NOISE&lt;/em&gt;?&lt;/strong&gt;
In the sense used here, &lt;em&gt;noise&lt;/em&gt; refers to subtle variations in pixel definitions, that may be recognised as an edge, but is most certainly not one. In the same sense as signals, it is unwanted in this purpose and needs to reduced.&lt;/p&gt;

&lt;h2 id=&quot;the-statistics&quot;&gt;The Statistics&lt;/h2&gt;
&lt;p&gt;The algorithm, in simple words, involves replacing each pixel definition with one obtained by applying the kernel on it - in general, forming a sort of mean application - which is similar to averaging out and minimising the noise.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/meanshift-algorithm-for-image-processing/meanshift_fx.png&quot; alt=&quot;Meanshift Principle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;em&gt;g&lt;/em&gt; refers to the Kernel operation applied on each element Xi, where X is an assumed mean and &lt;em&gt;h&lt;/em&gt; is a parameter called &lt;u&gt;resolution&lt;/u&gt;. The obtained expression m(x) is referred to as the Mean Shift, on following this procedure for a large number of times, this m(x) converges to zero. We wish to minimise this m(x), without losing much information, so that further techniques of gradient can be applied for edge-detection. This is similar to &lt;a href=&quot;http://mathworld.wolfram.com/JacobiMethod.html&quot;&gt;Jacobi’s Method&lt;/a&gt; of iteration.&lt;/p&gt;

&lt;h2 id=&quot;the-algorithm&quot;&gt;The Algorithm&lt;/h2&gt;
&lt;p&gt;Now, coming to the real application part of the algorithm, this method involves applying a suitable convulation matrix to the image matrix to smoothen out the edges. This matrix can be of various types, and optimised for better results. Some simple types include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Flat Kernel (linear)&lt;/li&gt;
  &lt;li&gt;Gaussian Kernel (exponential)&lt;/li&gt;
  &lt;li&gt;Epanechikov Kernel (quadratic)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The simplest of these is the Flat Kernel, in which the pixel’s value is changed to the averaged value of it’s surroundings, with equal weight to each pixel. &lt;img src=&quot;/assets/meanshift-algorithm-for-image-processing/flat_kernel.png&quot; alt=&quot;Flat Kernel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A sample code for this algorithm, implemented in ‘MATLAB’,  is as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;%set the number of iterations of the algorithm&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;Vt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;% Kernel Definition&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;        
    	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, V is the image matrix of ‘nx X ny’ and Vt is a dummy matrix of same size, used during the loop. The filter can be changed by altering the line marked as &lt;em&gt;Kernel Definition&lt;/em&gt;.
Basically, the algorithm can be used to merge modes and generate clusters.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Modes&lt;/em&gt;- Modes refer to the peaks in color intensities in the pixel map. When plotted, these are the peaks in ‘3D-plot’.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Clusters&lt;/em&gt;- Clusters refer to the groups of similarly defined pixels, ie, groups with similar color or compositon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see in the images below, as the number of iterations increase, modes get merged and a cluser is formed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;THE PARAMETERS:&lt;/strong&gt; The alterable parameters include:
*‘it’ or the number of iterations. Increasing ‘it’ would increase the merge rate, but also increase the computational cost as number of iterations would increase. Hence, there is an optimised upper bound for this value.
&lt;img src=&quot;/assets/meanshift-algorithm-for-image-processing/Meanshift0.jpg&quot; alt=&quot;Original Image - 2 modes&quot; /&gt; &lt;img src=&quot;/assets/meanshift-algorithm-for-image-processing/Meanshift100.jpg&quot; alt=&quot;100 Iterations&quot; /&gt; &lt;img src=&quot;/assets/meanshift-algorithm-for-image-processing/Meanshift500.jpg&quot; alt=&quot;500 Iterations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;*‘h’ or resolution is a parameter used in the statistical definition. Since it is in the denominator, it can play a huge role in the smoothening effect as shown. In general, a large ‘h’ would mean faster convergence, larger clusters and more loss of information. This value can be tweaked as desired, for optimal results.
&lt;img src=&quot;/assets/meanshift-algorithm-for-image-processing/meanshift_H_org.png&quot; alt=&quot;Original Image&quot; /&gt; &lt;img src=&quot;/assets/meanshift-algorithm-for-image-processing/meanshift_H_6.png&quot; alt=&quot;h = 6&quot; /&gt; &lt;img src=&quot;/assets/meanshift-algorithm-for-image-processing/meanshift_H_16.png&quot; alt=&quot;h = 16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more such example, you can refer to &lt;a href=&quot;https://www.inf.tu-dresden.de/content/institutes/ki/is/VORTRAG/Vortrag_Huong_Nguyen.pdf&quot;&gt;this PDF&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ADVANTAGES&lt;/strong&gt;
Comparing with other clustering algo K-means, it does not ASSUME any cluster etc. and the algo ensures that clusters are sorted automatically. Also, it is robust and works for any no. of (non-predefined) modes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DRAWBACKS&lt;/strong&gt;
The iterative technique is highly redundant and computationally expensive; also, the method doesnt work well in free space (3D), as there may exist many local maximas that converge to optimas and mode isolation cannot be done.&lt;/p&gt;

&lt;p&gt;This concludes the summary of an essential algorithm in the art of Image Processing. Hope you enjoyed it!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Glimpse Of The Naive Bayes' Classifier</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/03/glimpse-of-the-naive-bayes-classifier/"/>
   <updated>2016-03-15T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/03/glimpse-of-the-naive-bayes-classifier</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/glimpse-of-the-naive-bayes-classifier/joke.png&quot; alt=&quot;joke&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The are numerous applications of machine learning out in the world and many more are being developed, I particularly like the clustering algorithms. In this post I would like to explore one of the most useful of supervised clustering algorithm, The Naive Bayes’ Classifier.&lt;/p&gt;

&lt;p&gt;In the post I will be using an example project that I am working upon as the default example. So what does the algorithm do.&lt;br /&gt;
In simple words it computes the probabilities of the the test case to lie in one of “clusters” with a specific probability. Let me go with the example to describe at what we are trying to achieve.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Problem:&lt;/u&gt;&lt;/strong&gt; Given an input paragraph we need to classify it as Argumentative, Narrative, Expository or Descriptive&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Solution:&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;u&gt;Training Set&lt;/u&gt;&lt;br /&gt;
Collected the training data set of different paragraphs already classified already in the given four categories.&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Feature Extraction&lt;/u&gt;&lt;br /&gt;
We Extract the features from the training database to generate a feature vector &lt;math&gt;v&lt;/math&gt;&lt;sub&gt;i&lt;/sub&gt; = (f&lt;sub&gt;1&lt;/sub&gt;,f&lt;sub&gt;2&lt;/sub&gt;,….)&lt;sub&gt;i&lt;/sub&gt; for each i&lt;sup&gt;th&lt;/sup&gt; point in the training dataset, this in our case are language features.&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Supervised Clustering Algorithm(Naive Bayes&#39;)&lt;/u&gt;&lt;br /&gt;
This is what the tutorial is about, we need to make four clusters(one for each para type) in the feature vector space. And this is what we will talk about in the tutorial.&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Input Result&lt;/u&gt;&lt;br /&gt;
This is the moment of truth we put in few known test cases we get their probabilities of lying in the clusters and see the accuracy of our algorithm, based on these results we decide on the modification that might be required in the training dataset.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let’s first go through what the Bayesian approach of classification!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/glimpse-of-the-naive-bayes-classifier/bayes.png&quot; alt=&quot;bayes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you might be thinking yeah this makes sense we take the classes in our example as the types of paragraphs and the data being the input. But we cannot input an paragraph we input a set of features which makes d a vector. So the next thing we look at is how to deal with the multidimensional input, that is like in our case a number of features.&lt;/p&gt;

&lt;p&gt;There are many methods to approach this problem, but one of the most simple being is that &lt;strong&gt;we assume that each feature have an independent distribution (or is Naive).&lt;/strong&gt; In our example the features we are likely to choose are something like, “number of certain punctuation per total words”,”number of stress adjectives per total words”,”average sentence length” etc. What we notice is that these all intuitively are more or less not dependent on each other, there will be few dependencies obviously but nothing that we can’t ignore :P. To summarize we have the probabilities expressed as.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/glimpse-of-the-naive-bayes-classifier/bayes2.jpg&quot; alt=&quot;bayes2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This settles the defining of our model and this is what the Naive Bayes’ Classifier is. Now we just need to predict the probability distribution of the features, this is usually chosen to be a Gaussian model with some w=varying parameter, we need to tune the parameter using some kind of techniques like maximum likelihood estimation. For more insight on this topic I suggest you have a look at few YouTube videos which are really amazing, one such short explanation is given &lt;a href=&quot;https://www.youtube.com/watch?v=8yvBqhm92xA&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lets put this tutorial to test, I have four clusters and many features for classifying the paragraphs, the project is still ongoing and will get finished real soon.&lt;/p&gt;

&lt;p&gt;Finally let us discuss the advantages and limitations of this classifier&lt;br /&gt;
&lt;strong&gt;ADVANTAGES&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fast to train. Fast to classify.&lt;/li&gt;
  &lt;li&gt;Not sensitive to irrelevant features.&lt;/li&gt;
  &lt;li&gt;Handles real as well as discrete data.&lt;/li&gt;
  &lt;li&gt;Handles data streaming well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;LIMITATION&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assumes independence of features and hence it does not capture the mutual dependence of features which might be present.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This concludes this really brief introduction!&lt;br /&gt;
Thank You!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Remote Controlling a bot with Android</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/03/remote-controlling-a-bot-with-android/"/>
   <updated>2016-03-12T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/03/remote-controlling-a-bot-with-android</id>
   <content type="html">&lt;!-- content goes below this --&gt;

&lt;p&gt;For the XLR8 competition 2015, we had made a remote control on android for the teams to operate their bots. The remote control used the android phone’s bluetooth to connect to an HC-05, followed by an ATtiny 2313 chip to decode the incoming bits. The XLR8 bots usually run on differential drive mechanism, so they require four inputs namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Left Front&lt;/li&gt;
  &lt;li&gt;Left Back&lt;/li&gt;
  &lt;li&gt;Right Front&lt;/li&gt;
  &lt;li&gt;Right Back&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More on differential drive here: &lt;a href=&quot;https://en.wikipedia.org/wiki/Differential_wheeled_robot&quot;&gt;wiki/Differential_wheeled_robot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each can be represented by one bit. So we had four output pins of the ATtiny going to four inputs of the Motor Driver (L293D in our case). After that it just boils down send the correct bit sequence from the phone based on the button pressed (i.e. control expected).&lt;/p&gt;

&lt;h1 id=&quot;attiny-board&quot;&gt;ATtiny Board&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Designed by Ajinkya Gorad&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;schematic&quot;&gt;Schematic:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/remote-controlling-a-bot-with-android/schematic.png&quot; alt=&quot;Schematic&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JP1 is where the programmer head attaches&lt;/li&gt;
  &lt;li&gt;JP3 is where HC-05 is attached&lt;/li&gt;
  &lt;li&gt;JP5 is the 4 bit output which is sent to motor driver&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connections are pretty straight forward. The RX/TX from HC-05 are joined with TX/RX of ATtiny (PD0 and PD1), and PB0-PB3 are designated the output pins. You should check the programming header connections in the datasheet. One thing we observed while testing was that due to loose connections in the voltage supply, the ATtiny would restart even if the connection went loose for a moment. This happened quite frequently while the bot was running, and this would stop the bot (the init conditions were to set all output pins to 0). For this we soldered a 47uF capacitor externally on the voltage supply pins (polarity matching).&lt;/p&gt;

&lt;p&gt;We designed a PCB with respect to this schematic. You can find the necessary Gerber files on the github repo &lt;a href=&quot;http://github.com/elec-club-iitb/xlr8-remote-control/tree/master/avr-receiver&quot;&gt;here&lt;/a&gt;. This is how it finally looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/remote-controlling-a-bot-with-android/avr_rec.jpg&quot; alt=&quot;Final product&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;avr-code&quot;&gt;AVR Code:&lt;/h2&gt;

&lt;p&gt;Code is pretty straight forward too. Take the bit-sequence from HC-05 through UART and output it on the four pins of PORTB. I have posted the relevant &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; function here. Entire code can be found on github.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;USARTInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise uart to baud rate 9600, no parity , 1 stopbit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;DDRB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// make all pins on port B as output
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;PORTB&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// initially make all pins low
&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//endless loop
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UCSRA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RXC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// wait for data to be received in uart UDR register
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PORTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//directly write value of uart data to port
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;android-app&quot;&gt;Android App:&lt;/h1&gt;

&lt;p&gt;The ATtiny is programmed to output the bit sequence as is. So once you send a bit sequence corresponding to “move forward”, the bot wont stop until you send another bit sequence corresponding to “stop”. The UI consist of three control modes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Motion Control: Front, Back, Left, Right control&lt;/li&gt;
  &lt;li&gt;Individual Motor control: Left Front, Left Back, Right Front, Right Back&lt;/li&gt;
  &lt;li&gt;Swag Mode :D: Hand-tilt based control. Tilt phone forward to move forward, and so on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Motion and Individual Motor control have buttons which on pressed send the bit sequence corresponding to the motion, and on released send bit sequence “stop”. In tilt control mode it check tilt on each axis x and y, if it is beyond a threshold (positive or negative) it sends that motions bit sequence else it sends “stop”.&lt;/p&gt;

&lt;p&gt;We also need to consider cases when two buttons are pressed together (which is necessary in Individual Control mode). So we controlled each bit individually on pressed and released rather than sending the whole bit sequence entirely. And we also made a function which would send the latest updated bit sequence which could be called after every update. The entire code is available on &lt;a href=&quot;http://github.com/elec-club-iitb/xlr8-remote-control/tree/master/avr-receiver&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;onTouch&lt;/code&gt; button code. You can see how the on pressed and on released events ( represented by &lt;code class=&quot;highlighter-rouge&quot;&gt;ACTION_DOWN&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ACTION_UP&lt;/code&gt; respectively). Rest of the functions used are quite obviously named. For the entire file, check the github repo.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTouch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_DOWN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Action Down&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Switch case to set a corresponding&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// bit sequence according to the button pressed&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left_fwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left_bck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right_fwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right_bck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_CANCEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_OUTSIDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Action Up&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Similar switch case to reset bits when button is left&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// In effect the motion of bot will last till the button is pressed&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left_fwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left_bck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right_fwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right_bck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Check if updated, and then only send&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We don want to unnecessarily send data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMotorState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R.id.&amp;lt;forward|backward|left|right&amp;gt;&lt;/code&gt; correspond to the Motion Control buttons. &lt;code class=&quot;highlighter-rouge&quot;&gt;R.id.&amp;lt;left_fwd|left_bck|right_fwd|right_bck&amp;gt;&lt;/code&gt; correspond to the Individual Motor control.&lt;/p&gt;

&lt;p&gt;The code responsible for Swag mode:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSensorChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SensorEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SensorManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DATA_X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SensorManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DATA_Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SensorManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DATA_Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;swag_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;swag_y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;y: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;swag_z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;z: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMotorState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_FWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RT_MOTOR_BCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;swag_bits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bits: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBinaryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMotorState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMotorState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mChatService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BluetoothChatService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STATE_CONNECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMotorState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code has a little complicated logic. So the first two &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;s check if there is a hard-tilt (high angle), then we send hard-left/hard-right control bit sequence. If not we check for soft-tilt and send those corresponding bit sequences if true. These tilts are in the x-axis i.e. the left-right axis. Now we go on to the front-back axis i.e. y-axis which is the last nested &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; condition.&lt;/p&gt;

&lt;p&gt;The bluetooth relevant code was taken from the BluetoothChat sample app provided by android. These two functions above are part of the BotControl class which is used in the UI as an &lt;code class=&quot;highlighter-rouge&quot;&gt;onTouchListener&lt;/code&gt; and  &lt;code class=&quot;highlighter-rouge&quot;&gt;SensorEventListener&lt;/code&gt; to capture both touches and tilt changes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using OpenCV on Raspberry-Pi</title>
   <link href="https://elec-club-iitb.github.io//blog/2016/03/using-opencv-on-raspberry-pi/"/>
   <updated>2016-03-07T00:00:00+00:00</updated>
   <id>https://elec-club-iitb.github.io//blog/2016/03/using-opencv-on-raspberry-pi</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/using-opencv-on-raspberry-pi/rpi.jpeg&quot; alt=&quot;raspberry pi logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Raspberry Pi is slowly finding a lot of applications related to image processing. I am going to provide a little overview of how one can get OpenCV up and running on your pi. I will be using tightVNC server for getting the display.&lt;/p&gt;

&lt;p&gt;The first step is getting OpenCV installed on your pi, we will follow the exact same procedure of installing OpenCV which I use on ubuntu. I will show you step by step on how to get your opencv setup on rpi ready.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Step Zero&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before we begin, I will tell you how my pi is connected so there is no confusion after moving further.&lt;br /&gt;
I have my pi connected to my wi-fi router with a LAN cable and have changed it to a &lt;em&gt;static IP configuration.&lt;/em&gt; I am accessing it through my terminal using the ssh channel. In short what I have now and what you should have is a rpi with it’s terminal. If you are totally new to rpi, I suggest you to take a look at these tutorials for setting up your pi &lt;a href=&quot;http://riddhishb.github.io/blog/rpituts.html&quot;&gt;get you pi up and running&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Step One&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install tightvncserver on the rpi as well as your linux powered laptop/desktop where you plan to get the display window of your pi. You can do that by a simple command &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install tightvncserver&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Step Two&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we start the vnc-server in the rpi, this will broadcast the “screen” of the rpi over the server, which then can be accessed remotely from some other laptop/desktop connected with the same server. In order to do this we need to run the following command on the rpi terminal:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;vncserver :1 -geometry 1366x600 -depth 16 -pixelformat rgb565&lt;/code&gt;&lt;br /&gt;
If you are doing this for the first time then it will ask you for setting a password (Yes, you need to remember it!). After finishing that you should see the following on the rpi’s terminal.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;#New ‘X’ desktop is raspberrypi:1&lt;/code&gt;&lt;br /&gt;
This means you have successfully got your rpi desktop put up on your server, now you need to access it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Step Three&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now using the laptop/desktop’s terminal and execute this command:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;vncviewer rpi_ip:5901&lt;/code&gt;&lt;br /&gt;
Here, rpi_ip is the static IP which you would have set for your pi. You will be asked for a password which you have set in the previous step, and then voila!. :D&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Step Four&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now all you need is to get opencv installed on your rpi. To get that done just follow the steps which you will use to install opencv in normal ubuntu based system, if you are comfortable with it then this tutorial stops here for you.For OpenCV installation Just follow the steps listed &lt;a href=&quot;/assets/using-opencv-on-raspberry-pi/opencv installation.pdf&quot;&gt;here(OpenCV installation on Ubuntu).&lt;/a&gt;&lt;br /&gt;
You will also need two scripts in above installation the opencv installation. Get them from here:&lt;br /&gt;
&lt;a href=&quot;/assets/using-opencv-on-raspberry-pi/opencv2_4_6_1.sh&quot;&gt;opencv2_4_6_1.sh&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/using-opencv-on-raspberry-pi/new&quot;&gt;new&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank You!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</content>
 </entry>
 

</feed>
